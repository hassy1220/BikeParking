<div class="container">
  <% if flash[:notice] %>
    <div class="alert alert-info">
      <%= flash[:notice] %>
    </div>
  <% end %>
  <% if flash[:alert] %>
    <div class="alert alert-danger">
      <%= flash[:alert] %>
    </div>
  <% end %>
  <div class="text-center">
   <input type="text" id="keyword"><button id="search" class="btn btn-info">検索実行</button>
  </div>


  <div id="map" style="width:100%; height:600px"></div>

  <% flash.each do |message_type, messages| %>
    <% if messages.class == Array %>
      <% messages.each do |message| %>
        <div class="alert alert-<%= message_type %>"><%= message %></div>
      <% end %>
    <% else %>
        <div class="alert alert-<%= message_type %>"><%= messages %></div>
    <% end %>
  <% end %>

  <%= form_with model: @park,url: public_parks_path do |f| %>
  <table class="table">
    <tr>
      <td>Choose file</td>
      <td><%= f.file_field :images,multiple:true,accept:"image/jpg" %></td>
    <tr>
       <td>駐輪場名</td>
       <td><%= f.text_field :name,class:"form-control",placeholder:"駐車場名がわからない場合は(〜市駐車場等)" %></td>
    </tr>
    <tr>
       <td>説明事項</td>
       <td><%= f.text_area :description,class:"form-control",placeholder:"広さ、目的地へのアクセスの良さ等" %></td>
    </tr>
    <tr>
       <td>駐車可能条件</td>
       <td><%= f.collection_radio_buttons :spec, Park.specs_i18n, :first , :last %></td>
    </tr>
    <tr>
      <td>目的地</td>
      <td><%= f.text_field :purpose,class:"form-control",placeholder:"例）キャナルシティ" %></td>
    </tr>
    <tr>
       <td>金額</td>
       <td><%= f.text_field :price %> / <%= f.select :parking_time,*[1..24] %>時間</td>
    </tr>
       <%= f.hidden_field :lat,value:"lat" %>
       <%= f.hidden_field :lng,value:"lng" %>
       <%= f.hidden_field :addressOutput,value:"address" %>
       <%= fields_for :vicinity do |f| %>
         <%= f.hidden_field :vicinity_name,value:"" %>
       <% end %>
    </table>
    <p class="text-center"><%= f.submit"送信",class:"btn btn-success" %></p>
  <% end %>

</div>
<!--コントローラから受け取った値をhidden形式でviewに渡す。-->
<input type="hidden" id="park_areas" value="<%= @park_areas %>">
<!--投稿ずみの場所にマーカーを設置する為に必要な情報-->
<input type="hidden" id="park_area" value='<%= @park_area %>'>



  <script>
$(function(){
  function initMap() {
      // /43行目が初期マップ位置の拡大状況・44行目が緯度経度で福岡市を表示させる様にしている/
     var opts = {
       zoom: 15,
       center: new google.maps.LatLng(33.589815,130.412306),
       restriction: {
  		　　latLngBounds: {
  		　　	north: 33.600747,
  		　　	south: 33.578963,
  		　　	west: 130.386021,
  		　　	east: 130.434000
  	　 },
  	　　	strictBounds: true
  　　 }
     };

     var map = new google.maps.Map(document.getElementById("map"), opts);
     var infowindow = [];


     // 36行目のid=park_areaのValue値を取得
     var date =document.getElementById("park_area").value
     // 文字列っぽい配列を配列にする方法'[[aaa,aaa],[sss,sss],[sss,fff]]'→[aaa,aaa],[sss,sss],[sss,fff]に変換する
     var date = JSON.parse(date)
     // 配列を順番に繰り返し取り出し、マーカーを設置させる。
     for(var i = 0; i < date.length; i ++ ){
       var m_latlng = new google.maps.LatLng(date[i][1],date[i][0]);
       const marker = new google.maps.Marker({
     　 　 position: m_latlng,
     　 　 map:map,
       });
     };

      map.addListener( "click", function ( event ) {
        // 地図をクリックしたらf.hidden_field :lat,value:"lat"f.hidden_field :lng,value:"lng"のValue値変更
      　document.getElementById("park_lat").value = event.latLng.lat();
      　document.getElementById("park_lng").value = event.latLng.lng();

        // 入力した緯度・経度を取得
        var idoInput = document.getElementById("park_lat").value;
        var keidoInput = document.getElementById("park_lng").value;
        // 緯度・経度をLatLngクラスに変換
        var latLngInput = new google.maps.LatLng(idoInput, keidoInput);

        //GoogleMapsAPIジオコーダ
        var geocoder = new google.maps.Geocoder();

            geocoder.geocode(
              {
                latLng: latLngInput
              },
              function(results, status) {
                var address = "";

                if (status == google.maps.GeocoderStatus.OK) {
                //取得が成功した場合

                  //住所を取得します。
                  address = results[0].formatted_address;

                } else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {
                  alert("住所が見つかりませんでした。");
                } else if (status == google.maps.GeocoderStatus.ERROR) {
                  alert("サーバ接続に失敗しました。");
                } else if (status == google.maps.GeocoderStatus.INVALID_REQUEST) {
                  alert("リクエストが無効でした。");
                } else if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
                  alert("リクエストの制限回数を超えました。");
                } else if (status == google.maps.GeocoderStatus.REQUEST_DENIED) {
                  alert("サービスが使えない状態でした。");
                } else if (status == google.maps.GeocoderStatus.UNKNOWN_ERROR) {
                  alert("原因不明のエラーが発生しました。");
                }

                //住所の結果表示をします。
                document.getElementById('park_addressOutput').value = address;
                var m_latlng = new google.maps.LatLng(idoInput,keidoInput);
                var marke = new google.maps.Marker({
               　  position: m_latlng,
                  map: map,
              　});
              　 // 　新しいところをクリックしたら、古いマーカーは消す
              　map.addListener( "click", function ( event ) {
                 marke.setMap(null);
                });
            });




       　　　service=new google.maps.places.PlacesService(map);
            var request={
                location: new google.maps.LatLng(idoInput,keidoInput),
                radius:250, /* 指定した座標から半径1000m(1km)以内 */
                types:['shopping_mall'],
            };

            service.search(request, callback);
            function callback(results, status) {
              document.getElementById("vicinity_vicinity_name").value = "";
              if (status==google.maps.places.PlacesServiceStatus.OK && results.length>0){
                  for (var i=0; i<results.length; i++) {
                      var places=results[i];
                      console.log(results[i].name)
                      document.getElementById("vicinity_vicinity_name").value += `${results[i].name},`;
                  }
              }else{
                alert("このエリアでのスポット情報はありません。");
              }
            };


  　   });

    // 検索実行ボタンが押下されたとき(住所検索)GooglePlaceAPI
      document.getElementById('search').addEventListener('click', function() {

        // クリックイベントが発生する度に、infowindowの中身(配列)をfor文で取り出し全てcloseしている
        for (var j=0; j<infowindow.length; j++) {
              infowindow[j].close();
            };

        key = document.getElementById('keyword').value;
        if(key == ""){
          alert("キーワードを入力してください")
          return;
        };

　　　　var service = new google.maps.places.PlacesService(map);
        var request={
            　locationBias: {north: 33.600747, south: 33.578963, east: -130.434000, west: -130.386021},
            　query: key
            };
         service.textSearch(request,callback);

         function callback(results, status){
           if (status == google.maps.places.PlacesServiceStatus.OK) {
             for (var i = 0; i < results.length; i++) {
                var place = results[i];
                infowindow[i] = new google.maps.InfoWindow({
                  content: place.name,
                  position: place.geometry.location,
                });
                infowindow[i].open(map);
                console.log(infowindow[i].content);
             }
           }else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {
              alert("サーバ接続に失敗しました。");
           };
         }
      });

  };
  // 上のfunction initMapは自分が勝手に定義しただけで、initmapを呼び出してあげないと、地図は表示されない
　initMap();

});
 </script>
